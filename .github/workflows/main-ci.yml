name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend:
    name: Backend Pipeline
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: whatif_test
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Create test environment
      working-directory: ./backend
      run: |
        echo "NODE_ENV=test" > .env.test
        echo "DB_HOST=localhost" >> .env.test
        echo "DB_PORT=5432" >> .env.test
        echo "DB_NAME=whatif_test" >> .env.test
        echo "DB_USER=postgres" >> .env.test
        echo "DB_PASSWORD=postgres" >> .env.test
        echo "JWT_SECRET=test_secret" >> .env.test

    - name: Run tests
      working-directory: ./backend
      run: npm test -- --coverage --watchAll=false

    - name: Run linting
      working-directory: ./backend
      run: npm run lint

    - name: Type check
      working-directory: ./backend
      run: npx tsc --noEmit

    - name: Build
      working-directory: ./backend
      run: npm run build

  frontend:
    name: Frontend Pipeline
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --coverage --reporter=verbose

    - name: Run linting
      working-directory: ./frontend
      run: npm run lint

    - name: Type check
      working-directory: ./frontend
      run: npx tsc --noEmit

    - name: Build
      working-directory: ./frontend
      run: npm run build

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Backend security audit
      working-directory: ./backend
      run: npm audit --audit-level moderate

    - name: Frontend security audit
      working-directory: ./frontend
      run: npm audit --audit-level moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Generate coverage report
      run: |
        echo "Combined Coverage Report" > coverage-summary.md
        echo "========================" >> coverage-summary.md
        echo "" >> coverage-summary.md
        echo "Backend: $(cat backend/coverage/coverage-summary.json | jq -r '.total.lines.pct')%" >> coverage-summary.md
        echo "Frontend: $(cat frontend/coverage/coverage-summary.json | jq -r '.total.lines.pct')%" >> coverage-summary.md

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: |
          ./backend/coverage/lcov.info
          ./frontend/coverage/lcov.info
        flags: |
          backend
          frontend
        name: combined-coverage

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend, frontend, security, quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Build backend
      working-directory: ./backend
      run: |
        npm ci
        npm run build

    - name: Build frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build

    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add your deployment commands here
        # Example: Deploy to Vercel, Heroku, AWS, etc. 